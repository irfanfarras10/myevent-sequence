@startuml "melihat daftar event"

    title "Melihat Daftar Event"
    hide footbox
    skinparam  shadowing false

    skinparam sequence {    
        ArrowThickness 1.5
        ActorFontName Century Gothic
        ActorBackgroundColor  #C6EFFC
        ArrowFontName Century Gothic
        ParticipantBorderThickness 1.5
        ParticipantBackgroundColor #C6EFFC
    }


    actor "Penyelenggara Event" as eo 
    participant "__:EventScreen__" as viewEventList
    participant "__:EventListController__" as controllerEventList
    participant "__:ViewEventListApiResponseModel__" as modelEventList
    participant "__:ApiEvent__" as apiEvent
    participant "__:ApiUtil__" as apiUtil
    participant "__:EventController__" as controllerEvent
    participant "__:EventService__" as serviceEvent
    participant "__:EventRepository__" as repositoryEvent
    participant "__:ViewEventListApiResponse__" as responseModel

    eo -> viewEventList: Mengklik menu event
    activate eo
    activate viewEventList
    
    viewEventList -> controllerEventList: .loadData()
    activate controllerEventList
    
    controllerEventList -> controllerEventList: .resetState()
    activate controllerEventList

    deactivate controllerEventList
    alt Status Event Draft 
        controllerEventList -> apiEvent: .getEventDraft()
        activate apiEvent
        apiEvent -> apiUtil: .apiRequestGet(endpoint)
        activate apiUtil
        apiUtil -> controllerEvent: HTTP Request
        activate controllerEvent
        controllerEvent -> serviceEvent: .getDraftEvent()
        activate serviceEvent
        serviceEvent -> repositoryEvent: .findByStatus(1)
        activate repositoryEvent 
        repositoryEvent --> serviceEvent: eventDraft
        deactivate repositoryEvent 
        serviceEvent -> responseModel: ViewEventListApiResponse()
        activate responseModel
        responseModel --> serviceEvent: newEvent
        deactivate responseModel    
        serviceEvent -> serviceEvent: .setData(data)
        activate serviceEvent
        deactivate serviceEvent
        loop
            serviceEvent -> serviceEvent: .add(data)
            activate serviceEvent
        end
        deactivate serviceEvent
        serviceEvent -> serviceEvent: .setEventDataList(newEventData)
        activate serviceEvent 
        deactivate serviceEvent 
        serviceEvent --> controllerEvent: ViewEventListApiRespone
        deactivate serviceEvent
        controllerEvent --> apiUtil: JSON Response
        deactivate controllerEvent
        apiUtil --> apiEvent: response
        deactivate apiUtil
        apiEvent --> controllerEventList: response 
        controllerEventList -> controllerEventList: .checkApiResponse(response)
        activate controllerEventList
        deactivate controllerEventList
        alt Response Berhasil 
            controllerEventList -> modelEventList: .fromJson(response)
            activate modelEventList
            modelEventList --> controllerEventList: ViewEventListApiResponseModel
            deactivate modelEventList
            controllerEventList --> viewEventList: eventList
            viewEventList --> eo: Menampilkan daftar event status draft
        else Response Gagal
            controllerEventList --> viewEventList: Error Handling View
            viewEventList --> eo: Menampilkan tampilan error 
        end 
    else Status Event Akan Datang
        controllerEventList -> apiEvent: .getEventPublish()
        apiEvent -> apiUtil: .apiRequestGet(endpoint)
        activate apiUtil
        apiUtil -> controllerEvent: JSON Request
        activate controllerEvent
        controllerEvent -> serviceEvent: .getPublishedEvent()
        activate serviceEvent
        serviceEvent -> repositoryEvent: .findByStatus(2)
        activate repositoryEvent 
        repositoryEvent --> serviceEvent: eventDraft
        deactivate repositoryEvent 
        serviceEvent -> responseModel: ViewEventListApiResponse()
        activate responseModel
        responseModel --> serviceEvent: newEvent
        deactivate responseModel    
        serviceEvent -> serviceEvent: .setData(data)
        activate serviceEvent
        deactivate serviceEvent
        serviceEvent -> serviceEvent: .add(data)
        activate serviceEvent
        deactivate serviceEvent
        serviceEvent -> serviceEvent: .setEventDataList(newEventData)
        activate serviceEvent 
        deactivate serviceEvent 
        serviceEvent --> controllerEvent: ViewEventListApiRespone
        deactivate serviceEvent
        controllerEvent --> apiUtil: JSON Response
        deactivate controllerEvent
        apiUtil --> apiEvent: response
        deactivate apiUtil
        apiEvent --> controllerEventList: response 
        controllerEventList -> controllerEventList: .checkApiResponse(response)
        activate controllerEventList
        deactivate controllerEventList
        alt Response Berhasil 
            controllerEventList -> modelEventList: .fromJson(response)
            activate modelEventList
            modelEventList --> controllerEventList: ViewEventListApiResponseModel
            deactivate modelEventList
            controllerEventList --> viewEventList: eventList
            viewEventList --> eo: Menampilkan daftar event status draft
        else Response Gagal
            controllerEventList --> viewEventList: Error Handling View
            viewEventList --> eo: Menampilkan tampilan error
        end 
    else Status Event Sedang Berjalan 
        controllerEventList -> apiEvent: .getEventLive()
        apiEvent -> apiUtil: .apiRequestGet(endpoint)
        activate apiUtil
        apiUtil -> controllerEvent: JSON Request
        activate controllerEvent
        controllerEvent -> serviceEvent: .getLiveEvent()
        activate serviceEvent
        serviceEvent -> repositoryEvent: .findByStatus(3)
        activate repositoryEvent 
        repositoryEvent --> serviceEvent: eventDraft
        deactivate repositoryEvent 
        serviceEvent -> responseModel: ViewEventListApiResponse()
        activate responseModel
        responseModel --> serviceEvent: newEvent
        deactivate responseModel    
        serviceEvent -> serviceEvent: .setData(data)
        activate serviceEvent
        deactivate serviceEvent
        loop
            serviceEvent -> serviceEvent: .add(data)
            activate serviceEvent
        end
        deactivate serviceEvent
        serviceEvent -> serviceEvent: .setEventDataList(newEventData)
        activate serviceEvent 
        deactivate serviceEvent 
        serviceEvent --> controllerEvent: ViewEventListApiRespone
        deactivate serviceEvent
        controllerEvent --> apiUtil: JSON Response
        deactivate controllerEvent
        apiUtil --> apiEvent: response
        deactivate apiUtil
        apiEvent --> controllerEventList: response 
        controllerEventList -> controllerEventList: .checkApiResponse(response)
        activate controllerEventList
        deactivate controllerEventList
        alt Response Berhasil 
            controllerEventList -> modelEventList: .fromJson(response)
            activate modelEventList
            modelEventList --> controllerEventList: ViewEventListApiResponseModel
            deactivate modelEventList
            controllerEventList --> viewEventList: eventList
            viewEventList --> eo: Menampilkan daftar event status draft
        else Response Gagal
            controllerEventList --> viewEventList: Error Handling View
            viewEventList --> eo: Menampilkan tampilan error
        end 
    else Status Event Selesai
        controllerEventList -> apiEvent: .getEventPass()
        apiEvent -> apiUtil: .apiRequestGet(endpoint)
        activate apiUtil
        apiUtil -> controllerEvent: JSON Request
        activate controllerEvent
        controllerEvent -> serviceEvent: .getPassedEvent()
        activate serviceEvent
        serviceEvent -> repositoryEvent: .findByStatus(4)
        activate repositoryEvent 
        repositoryEvent --> serviceEvent: eventDraft
        deactivate repositoryEvent 
        serviceEvent -> responseModel: ViewEventListApiResponse()
        activate responseModel
        responseModel --> serviceEvent: newEvent
        deactivate responseModel    
        serviceEvent -> serviceEvent: .setData(data)
        activate serviceEvent
        deactivate serviceEvent
        loop
            serviceEvent -> serviceEvent: .add(data)
            activate serviceEvent
        end
        deactivate serviceEvent
        serviceEvent -> serviceEvent: .setEventDataList(newEventData)
        activate serviceEvent 
        deactivate serviceEvent 
        serviceEvent --> controllerEvent: ViewEventListApiRespone
        deactivate serviceEvent
        controllerEvent --> apiUtil: JSON Response
        deactivate controllerEvent
        apiUtil --> apiEvent: response
        deactivate apiUtil
        apiEvent --> controllerEventList: response 
        controllerEventList -> controllerEventList: .checkApiResponse(response)
        activate controllerEventList
        deactivate controllerEventList
        alt Response Berhasil 
            controllerEventList -> modelEventList: .fromJson(response)
            activate modelEventList
            modelEventList --> controllerEventList: ViewEventListApiResponseModel
            deactivate modelEventList
            controllerEventList --> viewEventList: eventList
            viewEventList --> eo: Menampilkan daftar event status draft
        else Response Gagal
            controllerEventList --> viewEventList: Error Handling View
            viewEventList --> eo: Menampilkan tampilan error
        end 
    else Status Event Dibatalkan
         controllerEventList -> apiEvent: .getEventCancel()
        apiEvent -> apiUtil: .apiRequestGet(endpoint)
        activate apiUtil
        apiUtil -> controllerEvent: JSON Request
        activate controllerEvent
        controllerEvent -> serviceEvent: .getCancelEvent()
        activate serviceEvent
        serviceEvent -> repositoryEvent: .findByStatus(5)
        activate repositoryEvent 
        repositoryEvent --> serviceEvent: eventDraft
        deactivate repositoryEvent 
        serviceEvent -> responseModel: ViewEventListApiResponse()
        activate responseModel
        responseModel --> serviceEvent: newEvent
        deactivate responseModel    
        serviceEvent -> serviceEvent: .setData(data)
        activate serviceEvent
        deactivate serviceEvent
        loop
            serviceEvent -> serviceEvent: .add(data)
            activate serviceEvent
        end
        deactivate serviceEvent
        serviceEvent -> serviceEvent: .setEventDataList(newEventData)
        activate serviceEvent 
        deactivate serviceEvent 
        serviceEvent --> controllerEvent: ViewEventListApiRespone
        deactivate serviceEvent
        controllerEvent --> apiUtil: JSON Response
        deactivate controllerEvent
        apiUtil --> apiEvent: response
        deactivate apiUtil
        apiEvent --> controllerEventList: response 
        controllerEventList -> controllerEventList: .checkApiResponse(response)
        activate controllerEventList
        deactivate controllerEventList
        alt Response Berhasil 
            controllerEventList -> modelEventList: .fromJson(response)
            activate modelEventList
            modelEventList --> controllerEventList: ViewEventListApiResponseModel
            deactivate modelEventList
            controllerEventList --> viewEventList: eventList
            viewEventList --> eo: Menampilkan daftar event status draft
        else Response Gagal
            controllerEventList --> viewEventList: Error Handling View
            viewEventList --> eo: Menampilkan tampilan error
        end 
    end

@enduml